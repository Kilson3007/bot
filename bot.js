// Agente 077 - Bot Avan√ßado para Grupo de Agentes (Vers√£o corrigida)
// Vers√£o robusta com an√°lise de imagens, assist√™ncia em casos e gera√ß√£o de relat√≥rios detalhados

// Carrega as vari√°veis de ambiente do arquivo .env
require('dotenv').config();

// Importa os m√≥dulos necess√°rios
const { Client, LocalAuth } = require('whatsapp-web.js');
const qrcode = require('qrcode-terminal');
const fs = require('fs');
const path = require('path');
const { GoogleGenerativeAI } = require('@google/generative-ai');
const { enviarEmailComQRCode, enviarEmailConexaoBemSucedida } = require('./notificacao');

// Importa o servidor HTTP para manter o bot ativo no Render
const server = require('./servidor');

// Configura√ß√µes do Gemini
const geminiApiKey = process.env.GEMINI_API_KEY || 'AIzaSyBNi9lwXlEG7DLZdCAywwMsv2kIrPjcUSU';
const geminiModel = process.env.GEMINI_MODEL || 'gemini-1.5-flash';
const genAI = new GoogleGenerativeAI(geminiApiKey);
const model = genAI.getGenerativeModel({ model: geminiModel });

// Configura√ß√µes de grupos
const GRUPO_ID = process.env.GRUPO_ID || '120363236671730157@g.us';

// Controle de funcionalidades
const ANALISE_IMAGENS = process.env.ANALISE_IMAGENS === 'true';
const MONITORAMENTO_ATIVO = process.env.MONITORAMENTO_ATIVO === 'true';
const ENVIO_AUTOMATICO = process.env.ENVIO_AUTOMATICO === 'true';
const LIMITE_IMAGENS_DIA = parseInt(process.env.LIMITE_IMAGENS_DIA || '20');

// Controle de hor√°rios para relat√≥rios
const HORARIO_RELATORIO_PARCIAL = process.env.HORARIO_RELATORIO_PARCIAL || '13:00';
const HORARIO_RELATORIO_COMPLETO = process.env.HORARIO_RELATORIO_COMPLETO || '00:00';

// Inicializa a contagem de imagens e o Set para evitar duplicidades
let contagemImagens = 0;
const mensagensProcessadas = new Set();

console.log('Iniciando Agente 077 - Vers√£o Avan√ßada Corrigida...');

// Armazenamento de casos e discuss√µes
let discussoesDiarias = {};
let casosPendentes = {};
let imagensAnalisadas = {};
let modoAssistente = false;

// Configura o cliente WhatsApp
const client = new Client({
    authStrategy: new LocalAuth({ clientId: "agente077" }),
    puppeteer: {
        args: ['--no-sandbox', '--disable-setuid-sandbox', '--disable-dev-shm-usage', '--disable-accelerated-2d-canvas', '--disable-gpu'],
        headless: true
    }
});

// Tratamento do QR code
client.on('qr', async (qr) => {
    console.log('\n\n');
    console.log('===========================================');
    console.log('          ESCANEIE O QR CODE ABAIXO       ');
    console.log('===========================================');
    console.log('\n');
    
    // Gera QR code pequeno no terminal (ajustado para ser mais claro)
    qrcode.generate(qr, { small: true });
    console.log('\n');
    
    // Imprime o texto do QR code completo para ser copiado do terminal
    console.log('TEXTO DO QR CODE (use para gerar em um gerador online):');
    console.log(qr);
    console.log('\n');
    
    try {
        // Determina diret√≥rio tempor√°rio apropriado com base no ambiente
        const tempDir = process.env.NODE_ENV === 'production' ? '/tmp' : __dirname;
        
        // Salva o QR code como arquivo de texto
        const qrCodeTextPath = path.join(tempDir, 'qrcode_atual.txt');
        fs.writeFileSync(qrCodeTextPath, qr);
        console.log(`QR Code salvo como texto em: ${qrCodeTextPath}`);
        
        // Armazena o texto do QR code em uma vari√°vel global para acesso pelo servidor
        global.qrCodeText = qr;
        
        // Imprime o QR code nos logs de forma clara para facilitar a c√≥pia
        console.log('\n\n========== TEXTO DO QR CODE FORMATADO ==========');
        console.log(qr);
        console.log('================================================\n\n');
        
        // Envia o email apenas com o texto do QR code
        try {
            await enviarEmailComQRCode(null, qr);
        } catch (error) {
            console.log(`Erro ao enviar email de notifica√ß√£o: ${error.message}`);
        }
    } catch (error) {
        console.log(`Erro ao processar QR code: ${error.message}`);
    }
});

// Quando o cliente est√° pronto
client.on('ready', async () => {
    console.log('\n===========================================');
    console.log('AGENTE 077 CONECTADO COM SUCESSO!');
    console.log('===========================================\n');
    
    console.log('Comandos dispon√≠veis:');
    console.log('  !id - Mostra o ID do chat/grupo');
    console.log('  !ajuda - Lista de todos os comandos dispon√≠veis');
    console.log('  !caso [descri√ß√£o] - Registra um novo caso');
    console.log('  !buscar [descri√ß√£o] - Busca por pessoa desaparecida');
    console.log('  !analisar - Responda a uma imagem com este comando para analis√°-la');
    console.log('  !assistente on/off - Ativa/desativa o modo assistente');
    console.log('  !relatorio - Gera relat√≥rio completo');
    console.log('  !relatorio-parcial - Gera relat√≥rio parcial');
    
    // Cria pastas necess√°rias
    const pastas = ['logs', 'imagens_temp', 'casos'];
    pastas.forEach(pasta => {
        if (!fs.existsSync(pasta)) {
            fs.mkdirSync(pasta);
        }
    });
    
    // Registra conex√£o bem-sucedida
    fs.writeFileSync(
        path.join('logs', `conexao_${new Date().toISOString().replace(/:/g, '-')}.txt`),
        `Agente 077 conectado com sucesso em: ${new Date().toLocaleString()}\n`
    );
    
    // Carrega dados salvos se existirem
    carregarDados();

    // Remove o arquivo de QR code, se existir
    try {
        // Determina diret√≥rio tempor√°rio apropriado com base no ambiente
        const tempDir = process.env.NODE_ENV === 'production' ? '/tmp' : __dirname;
        const qrCodePath = path.join(tempDir, 'qrcode_atual.png');
        
        if (fs.existsSync(qrCodePath)) {
            fs.unlinkSync(qrCodePath);
            console.log('Arquivo de QR code removido com sucesso');
        }
        
        // Limpa a vari√°vel global
        if (global.qrCodePath) {
            delete global.qrCodePath;
        }
    } catch (error) {
        console.log(`Erro ao remover arquivo de QR code: ${error.message}`);
    }
    
    // Envia email de conex√£o bem-sucedida
    await enviarEmailConexaoBemSucedida();
    
    // Envia mensagem de status para o grupo
    if (process.env.MONITORAMENTO_ATIVO === 'true') {
        try {
            const grupos = await client.getChats();
            const grupo = grupos.find(chat => chat.id._serialized === process.env.GRUPO_ID || '120363236671730157@g.us');
            
            if (grupo) {
                await client.sendMessage(process.env.GRUPO_ID || '120363236671730157@g.us', 
                    'ü§ñ *Agente 077 - Status*\n\n' +
                    '‚úÖ Bot reiniciado e conectado com sucesso!\n' +
                    `üìä Limite di√°rio: ${process.env.LIMITE_IMAGENS_DIA} imagens\n` +
                    `üì∏ An√°lise de imagens: ${process.env.ANALISE_IMAGENS === 'true' ? 'Ativada' : 'Desativada'}\n` +
                    `üì§ Envio autom√°tico: ${process.env.ENVIO_AUTOMATICO === 'true' ? 'Ativado' : 'Desativado'}\n` +
                    `‚è∞ Relat√≥rio parcial: ${process.env.HORARIO_RELATORIO_PARCIAL || '13:00'}\n` +
                    `‚è∞ Relat√≥rio completo: ${process.env.HORARIO_RELATORIO_COMPLETO || '00:00'}\n\n` +
                    'üìù _Envie imagens para an√°lise ou digite "/ajuda" para ver os comandos dispon√≠veis._'
                );
            } else {
                console.log(`Erro: Grupo ${process.env.GRUPO_ID || '120363236671730157@g.us'} n√£o encontrado`);
            }
        } catch (error) {
            console.log(`Erro ao enviar mensagem de status: ${error.message}`);
        }
    }
});

// Fun√ß√£o para analisar imagens com IA
async function analisarImagemComIA(caminhoImagem) {
    try {
        console.log(`Analisando imagem: ${caminhoImagem}`);
        
        // L√™ a imagem como buffer
        const imagemBuffer = fs.readFileSync(caminhoImagem);
        
        // Converte para formato base64
        const imagemBase64 = imagemBuffer.toString('base64');
        
        // Envia para an√°lise no modelo Gemini com instru√ß√µes para ser conciso
        const result = await model.generateContent([
            "Analise esta imagem brevemente no contexto de uma investiga√ß√£o. Seja MUITO CONCISO (m√°ximo 250 palavras total). Forne√ßa: " +
            "1. Breve descri√ß√£o do que se v√™ (2-3 frases)" +
            "2. Elementos relevantes para investiga√ß√£o (lista curta)" +
            "3. Poss√≠veis conclus√µes (1-2 frases)" +
            "4. Recomenda√ß√µes essenciais (1-2 itens)",
            {
                inlineData: {
                    data: imagemBase64,
                    mimeType: "image/jpeg"
                }
            }
        ]);
        
        let resposta = result.response.text();
        
        // Limita o tamanho da resposta
        if (resposta.length > 1000) {
            resposta = resposta.substring(0, 997) + "...";
            console.log("Resposta de an√°lise de imagem truncada por ser muito longa");
        }
        
        return resposta;
    } catch (error) {
        console.error("Erro ao analisar imagem:", error);
        return "N√£o foi poss√≠vel analisar a imagem. Erro: " + error.message;
    }
}

// Fun√ß√£o para analisar texto com IA
async function analisarTextoComIA(texto, contexto) {
    try {
        let prompt = '';
        
        // Utiliza prompts espec√≠ficos para diferentes contextos
        if (contexto === "Resposta ao coment√°rio do grupo") {
            prompt = `
Analise esta mensagem enviada em um grupo de agentes investigativos: "${texto}"

Atue como um assistente virtual chamado "Agente 077". Forne√ßa uma resposta √∫til, relevante e concisa (m√°ximo 3 frases) que demonstre compreens√£o do contexto e ofere√ßa insights valiosos ou sugest√µes pr√°ticas.

A resposta deve ser:
1. Natural e conversacional
2. Focada no tema central da mensagem
3. Informativa mas sem revelar detalhes sens√≠veis
4. Preferencialmente sugerindo uma a√ß√£o ou perspectiva √∫til
5. Relacionada ao contexto de investiga√ß√£o quando apropriado

Importante: Responda diretamente sem incluir frases como "Como Agente 077, eu..." ou "Analisando sua mensagem...".
`;
        } else if (contexto === "An√°lise inicial de caso registrado") {
            prompt = `
Analise esta descri√ß√£o de caso registrado: "${texto}"

Forne√ßa uma an√°lise concisa (m√°ximo 200 palavras) que inclua:
1. Avalia√ß√£o inicial dos elementos-chave do caso
2. Poss√≠veis linhas de investiga√ß√£o a serem seguidas
3. Recomenda√ß√µes imediatas para os agentes

A an√°lise deve ser profissional, objetiva e √∫til para orientar os pr√≥ximos passos da investiga√ß√£o.
`;
        } else if (contexto === "Recomenda√ß√µes para busca de pessoa/objeto") {
            prompt = `
Analise esta descri√ß√£o de busca: "${texto}"

Forne√ßa recomenda√ß√µes pr√°ticas e concisas (m√°ximo 200 palavras) que incluam:
1. Estrat√©gias eficientes para localizar a pessoa/objeto
2. Pontos de aten√ß√£o priorit√°rios
3. Recursos ou t√©cnicas espec√≠ficas que podem ser √∫teis neste caso

As recomenda√ß√µes devem ser claras, diretas e imediatamente aplic√°veis pelos agentes em campo.
`;
        } else {
            // Prompt padr√£o para outros contextos
            prompt = `${contexto}: "${texto}"\n\nFa√ßa uma an√°lise detalhada considerando o contexto de investiga√ß√£o de agentes de seguran√ßa. Forne√ßa insights relevantes, poss√≠veis conex√µes com casos conhecidos e recomenda√ß√µes para os agentes. Seu papel √© auxiliar na investiga√ß√£o.`;
        }
        
        const result = await model.generateContent(prompt);
        return result.response.text();
    } catch (error) {
        console.error("Erro ao analisar texto:", error);
        return "N√£o foi poss√≠vel analisar o texto. Erro: " + error.message;
    }
}

// Fun√ß√£o para criar relat√≥rios detalhados
async function gerarRelatorioDetalhado(completo = true) {
    try {
        const dataAtual = new Date().toLocaleDateString();
        const horaAtual = new Date().toLocaleTimeString();
        const tipoRelatorio = completo ? "Completo" : "Di√°rio";
        
        // Extrai dados dos participantes mais ativos
        let participantesAtivos = {};
        Object.keys(discussoesDiarias).forEach(topico => {
            discussoesDiarias[topico].forEach(msg => {
                if (!participantesAtivos[msg.autor]) {
                    participantesAtivos[msg.autor] = 0;
                }
                participantesAtivos[msg.autor]++;
            });
        });
        
        // Ordena participantes por n√∫mero de mensagens
        const topParticipantes = Object.entries(participantesAtivos)
            .sort((a, b) => b[1] - a[1])
            .slice(0, 5);
        
        let topParticipantesTexto = "";
        if (topParticipantes.length > 0) {
            topParticipantesTexto = "*Top Participantes Ativos*\n";
            topParticipantes.forEach((p, i) => {
                topParticipantesTexto += `${i+1}. ${p[0]} - ${p[1]} mensagem${p[1] > 1 ? 'ns' : ''}\n`;
            });
            topParticipantesTexto += "\n";
        }
        
        // Organiza t√≥picos de discuss√£o
        let topicosPrincipais = Object.keys(discussoesDiarias)
            .map(topico => ({ 
                nome: topico, 
                count: discussoesDiarias[topico].length,
                mensagens: discussoesDiarias[topico]
            }))
            .sort((a, b) => b.count - a.count);
        
        // Processa casos ativos
        const casosAtivos = Object.entries(casosPendentes)
            .filter(([_, caso]) => caso.status === "Aberto" || caso.status === "Ativo")
            .map(([id, caso]) => ({
                id: id.slice(-4),
                descricao: caso.descricao,
                status: caso.status,
                autor: caso.autor
            }));
        
        // Extrai insights das imagens analisadas
        const insightsImagens = Object.values(imagensAnalisadas).map(img => ({
            resumo: img.resumo.replace(/^.*?:/, "").trim(),
            dataAnalise: new Date(img.dataAnalise),
            autor: img.autor
        }));
        
        // Ordena insights por data (mais recentes primeiro)
        insightsImagens.sort((a, b) => b.dataAnalise - a.dataAnalise);
        
        // Prepara dados para o resumo
        const dadosParaAnalise = {
            participantes: topParticipantes,
            topicos: topicosPrincipais,
            casos: casosAtivos,
            insights: insightsImagens
        };
        
        // Gera o resumo com IA
        let resumoGerado = "";
        
        try {
            const promptResumo = `
Crie um relat√≥rio natural no estilo de resumo de grupo para agentes investigativos, similar ao exemplo abaixo:

===EXEMPLO DE FORMATO===
Resumo Dia - Grupo Comunidade XYZ

*Top 5 Participantes Ativos*  
1. Usu√°rio A - 8 mensagens  
2. Usu√°rio B - 4 mensagens  
3. Usu√°rio C - 1 mensagem

*Assunto principal: üåü T√≠tulo do assunto principal*  
Breve resumo do assunto principal discutido no grupo, destacando pontos relevantes e contribui√ß√µes importantes. Incluir nomes dos participantes e mencionar ideias compartilhadas.

*Assuntos relevantes: üìñ T√≠tulo de outro assunto relevante*  
Resumo de outro t√≥pico importante discutido, com men√ß√µes a participantes e contexto.

*Casos em andamento: üîç T√≠tulo sobre investiga√ß√µes ativas*
Resumo sobre os casos ativos, sem revelar detalhes sens√≠veis mas indicando progressos.

*An√°lises relevantes: üñºÔ∏è Insights das imagens analisadas*
Resumo dos principais insights obtidos das an√°lises de imagens, sem mencionar IDs ou detalhes t√©cnicos.
===FIM DO EXEMPLO===

Use os seguintes dados reais para criar o relat√≥rio:
${JSON.stringify(dadosParaAnalise, null, 2)}

DIRETRIZES IMPORTANTES:
1. Use emojis relevantes para cada se√ß√£o
2. Mantenha o tom natural e fluido (n√£o robotizado)
3. Organize por se√ß√µes como no exemplo
4. Foque nas informa√ß√µes mais relevantes de cada t√≥pico
5. Mencione nomes de participantes quando relevante
6. Inclua 2-3 recomenda√ß√µes pr√°ticas para os agentes ao final
7. N√£o mencione IDs espec√≠ficos de imagens ou casos
8. Limite cada se√ß√£o a 3-5 frases concisas
9. Adicione um t√≠tulo que inclua "Agente 077" e a data atual
10. Use linguagem clara, direta e profissional
11. N√£o use formata√ß√£o de t√≥picos com asteriscos dentro dos par√°grafos
`;

            const resultado = await model.generateContent(promptResumo);
            resumoGerado = resultado.response.text();
        } catch (error) {
            console.error("Erro ao gerar resumo:", error);
            resumoGerado = `*Resumo ${tipoRelatorio} - Agente 077*\n\n`;
            
            // Adiciona se√ß√£o de participantes ativos
            if (topParticipantes.length > 0) {
                resumoGerado += topParticipantesTexto;
            }
            
            // Adiciona se√ß√£o de t√≥picos principais
            if (topicosPrincipais.length > 0) {
                resumoGerado += "*Assuntos Discutidos*\n";
                topicosPrincipais.forEach(topico => {
                    resumoGerado += `‚Ä¢ ${topico.nome}: ${topico.count} mensagens\n`;
                });
                resumoGerado += "\n";
            }
            
            // Adiciona se√ß√£o de casos ativos
            if (casosAtivos.length > 0) {
                resumoGerado += "*Casos em Andamento*\n";
                casosAtivos.forEach(caso => {
                    resumoGerado += `‚Ä¢ Caso #${caso.id}: ${caso.descricao.substring(0, 100)}${caso.descricao.length > 100 ? "..." : ""}\n`;
                });
                resumoGerado += "\n";
            }
            
            // Adiciona se√ß√£o de insights de imagens
            if (insightsImagens.length > 0) {
                resumoGerado += "*An√°lises Relevantes*\n";
                insightsImagens.slice(0, 3).forEach(insight => {
                    resumoGerado += `‚Ä¢ ${insight.resumo}\n`;
                });
                resumoGerado += "\n";
            }
        }
        
        return resumoGerado;
    } catch (error) {
        console.error("Erro ao gerar relat√≥rio:", error);
        return `*Relat√≥rio ${completo ? "Completo" : "Di√°rio"} - Agente 077*\n\nOcorreu um erro ao gerar o relat√≥rio. Por favor, tente novamente mais tarde.`;
    }
}

// Fun√ß√µes para gerenciar casos e dados
function registrarCaso(descricao, autor) {
    const id = Date.now().toString().slice(-6);
    
    casosPendentes[id] = {
        id: id,
        descricao: descricao,
        autor: autor,
        dataRegistro: new Date().toISOString(),
        status: "Aberto",
        atualizacoes: []
    };
    
    salvarDados();
    return id;
}

function registrarBusca(descricao, autor) {
    const id = "B" + Date.now().toString().slice(-6);
    
    casosPendentes[id] = {
        id: id,
        tipo: "Busca",
        descricao: descricao,
        autor: autor,
        dataRegistro: new Date().toISOString(),
        status: "Ativo",
        atualizacoes: []
    };
    
    salvarDados();
    return id;
}

function registrarDiscussao(topico, mensagem, autor) {
    if (!discussoesDiarias[topico]) {
        discussoesDiarias[topico] = [];
    }
    
    discussoesDiarias[topico].push({
        autor: autor,
        mensagem: mensagem,
        timestamp: new Date().toISOString()
    });
    
    salvarDados();
}

function registrarAnaliseImagem(resumo, analiseCompleta, autor) {
    const id = "IMG" + Date.now().toString().slice(-6);
    
    imagensAnalisadas[id] = {
        id: id,
        resumo: resumo,
        analiseCompleta: analiseCompleta,
        autor: autor,
        dataAnalise: new Date().toISOString()
    };
    
    salvarDados();
    return id;
}

// Fun√ß√µes de persist√™ncia de dados
function salvarDados() {
    const dados = {
        discussoesDiarias: discussoesDiarias,
        casosPendentes: casosPendentes,
        imagensAnalisadas: imagensAnalisadas,
        ultimaAtualizacao: new Date().toISOString()
    };
    
    fs.writeFileSync(
        path.join('casos', `dados_${new Date().toISOString().split('T')[0]}.json`),
        JSON.stringify(dados, null, 2)
    );
}

function carregarDados() {
    try {
        const dataAtual = new Date().toISOString().split('T')[0];
        const caminhoArquivo = path.join('casos', `dados_${dataAtual}.json`);
        
        if (fs.existsSync(caminhoArquivo)) {
            const dadosJson = fs.readFileSync(caminhoArquivo, 'utf8');
            const dados = JSON.parse(dadosJson);
            
            discussoesDiarias = dados.discussoesDiarias || {};
            casosPendentes = dados.casosPendentes || {};
            imagensAnalisadas = dados.imagensAnalisadas || {};
            
            console.log("Dados carregados com sucesso.");
        } else {
            console.log("Nenhum dado anterior encontrado para hoje. Iniciando com dados vazios.");
        }
    } catch (error) {
        console.error("Erro ao carregar dados:", error);
    }
}

function agendarLimpezaDados() {
    const agora = new Date();
    const meia_noite = new Date();
    meia_noite.setHours(24, 0, 0, 0);
    
    const tempoAteProximaMeiaNoite = meia_noite - agora;
    
    setTimeout(() => {
        console.log("Salvando relat√≥rio do dia antes de limpar dados...");
        
        // Gera e salva relat√≥rio final do dia
        gerarRelatorioDetalhado(true).then(relatorio => {
            const dataAtual = new Date().toISOString().split('T')[0];
            fs.writeFileSync(
                path.join('logs', `relatorio_final_${dataAtual}.txt`),
                relatorio
            );
            
            // Limpa os dados di√°rios mas mant√©m casos pendentes
            discussoesDiarias = {};
            imagensAnalisadas = {};
            
            console.log("Dados di√°rios limpos. Casos pendentes mantidos.");
            salvarDados();
            
            // Agenda pr√≥xima limpeza
            agendarLimpezaDados();
        });
    }, tempoAteProximaMeiaNoite);
    
    console.log(`Pr√≥xima limpeza de dados agendada para meia-noite (em ${(tempoAteProximaMeiaNoite / 3600000).toFixed(2)} horas).`);
}

// Processamento de comandos
async function processarComando(msg) {
    try {
        const comando = msg.body.toLowerCase().trim();
        const autor = msg.author || msg.from.split('@')[0];
        
        // Extrai o prefixo e os argumentos
        const partes = comando.split(' ');
        const prefixo = partes[0];
        const args = partes.slice(1).join(' ');
        
        // Comando !id
        if (prefixo === '!id') {
            await client.sendMessage(msg.from, `ID deste chat: ${msg.from}`);
            console.log(`ID enviado para: ${msg.from}`);
            
            fs.writeFileSync('ultimo_id.txt', `ID: ${msg.from}\nData: ${new Date().toLocaleString()}`);
            return true;
        }
        
        // Comando !teste
        if (prefixo === '!teste') {
            await client.sendMessage(msg.from, '‚úÖ Agente 077 online e operacional.');
            console.log(`Teste de funcionamento enviado para: ${msg.from}`);
            return true;
        }
        
        // Comando !ajuda ou !help
        if (prefixo === '!ajuda' || prefixo === '!help') {
            const mensagemAjuda = `*Comandos do Agente 077 - Assistente Investigativo*\n\n` +
                `!id - Mostra o ID deste chat\n` +
                `!caso [descri√ß√£o] - Registra um novo caso\n` +
                `!buscar [descri√ß√£o] - Registra busca de pessoa/objeto\n` +
                `!analisar - Responda a uma imagem com este comando\n` +
                `!assistente on/off - Ativa/desativa modo assistente\n` +
                `!relatorio - Gera relat√≥rio completo\n` +
                `!relatorio-parcial - Gera relat√≥rio parcial\n` +
                `!teste - Verifica se o bot est√° respondendo\n` +
                `!ajuda - Mostra esta mensagem\n\n` +
                `O Agente 077 tamb√©m:\n` +
                `- Analisa automaticamente imagens compartilhadas\n` +
                `- Gera relat√≥rios di√°rios √†s 13:00 e 00:00\n` +
                `- Oferece sugest√µes no modo assistente`;
            
            await client.sendMessage(msg.from, mensagemAjuda);
            console.log(`Mensagem de ajuda enviada para: ${msg.from}`);
            return true;
        }
        
        // Comando !caso
        if (prefixo === '!caso') {
            if (!args) {
                await client.sendMessage(msg.from, 'Por favor, forne√ßa uma descri√ß√£o do caso. Exemplo: !caso Investiga√ß√£o de furto na rua Principal.');
                return true;
            }
            
            const idCaso = registrarCaso(args, autor);
            
            await client.sendMessage(msg.from, `‚úÖ Caso registrado com sucesso.\n\nID: #${idCaso}\nDescri√ß√£o: ${args}\nStatus: Aberto\n\nEste caso foi adicionado ao sistema e aparecer√° nos relat√≥rios.`);
            console.log(`Novo caso registrado: ${idCaso} - ${args}`);
            
            // Adiciona uma an√°lise b√°sica do caso
            setTimeout(async () => {
                const analise = await analisarTextoComIA(args, "An√°lise inicial de caso registrado");
                await client.sendMessage(msg.from, `*An√°lise Preliminar - Caso #${idCaso}*\n\n${analise}`);
            }, 2000);
            
            return true;
        }
        
        // Comando !buscar
        if (prefixo === '!buscar') {
            if (!args) {
                await client.sendMessage(msg.from, 'Por favor, forne√ßa detalhes sobre a pessoa/objeto a ser buscado. Exemplo: !buscar Jo√£o Silva, 35 anos, desaparecido desde 15/06.');
                return true;
            }
            
            const idBusca = registrarBusca(args, autor);
            
            await client.sendMessage(msg.from, `‚úÖ Busca registrada com sucesso.\n\nID: #${idBusca}\nDescri√ß√£o: ${args}\nStatus: Ativo\n\nEsta busca foi adicionada ao sistema e aparecer√° nos relat√≥rios.`);
            console.log(`Nova busca registrada: ${idBusca} - ${args}`);
            
            // Adiciona recomenda√ß√µes para a busca
            setTimeout(async () => {
                const recomendacoes = await analisarTextoComIA(args, "Recomenda√ß√µes para busca de pessoa/objeto");
                await client.sendMessage(msg.from, `*Recomenda√ß√µes - Busca #${idBusca}*\n\n${recomendacoes}`);
            }, 2000);
            
            return true;
        }
        
        // Comando !analisar (para an√°lise de imagens)
        if (prefixo === '!analisar') {
            // Verifica se √© uma resposta a uma mensagem com m√≠dia
            if (msg.hasQuotedMsg) {
                const mensagemQuotada = await msg.getQuotedMessage();
                
                if (mensagemQuotada.hasMedia) {
                    await client.sendMessage(msg.from, 'üîç Analisando imagem, aguarde um momento...');
                    
                    // Baixa a m√≠dia
                    const media = await mensagemQuotada.downloadMedia();
                    if (!media) {
                        await client.sendMessage(msg.from, 'N√£o foi poss√≠vel baixar a imagem.');
                        return true;
                    }
                    
                    // Salva a imagem temporariamente
                    const buffer = Buffer.from(media.data, 'base64');
                    const tempPath = path.join(__dirname, 'imagens_temp', `temp_${Date.now()}.jpg`);
                    fs.writeFileSync(tempPath, buffer);
                    
                    // Analisa a imagem
                    const analise = await analisarImagemComIA(tempPath);
                    
                    // Salva resultado da an√°lise
                    const resumoBreve = analise.split('\n')[0].substring(0, 100) + "...";
                    registrarAnaliseImagem(resumoBreve, analise, autor);
                    
                    // Responde com a an√°lise
                    await client.sendMessage(msg.from, `*An√°lise Concisa da Imagem:*\n\n${analise}`);
                    return true;
                } else {
                    await client.sendMessage(msg.from, 'A mensagem respondida n√£o cont√©m uma imagem para an√°lise.');
                    return true;
                }
            } else {
                await client.sendMessage(msg.from, 'Para analisar uma imagem, responda a uma mensagem com imagem usando o comando !analisar');
                return true;
            }
        }
        
        // Comando !assistente
        if (prefixo === '!assistente') {
            if (args === 'on') {
                modoAssistente = true;
                await client.sendMessage(msg.from, '‚úÖ Modo assistente ativado. O Agente 077 agora participar√° ativamente nas conversas oferecendo an√°lises e sugest√µes.');
                console.log(`Modo assistente ATIVADO para: ${msg.from}`);
                
                // Confirma ativa√ß√£o com uma resposta imediata
                setTimeout(async () => {
                    await client.sendMessage(msg.from, '*Assistente Agente 077:*\n\nEstou ativo e monitorando a conversa. Posso ajudar com an√°lises, sugest√µes e insights sobre as discuss√µes do grupo.');
                }, 2000);
                
                return true;
            } else if (args === 'off') {
                modoAssistente = false;
                await client.sendMessage(msg.from, '‚ùå Modo assistente desativado. O Agente 077 agora responder√° apenas a comandos espec√≠ficos.');
                console.log(`Modo assistente DESATIVADO para: ${msg.from}`);
                return true;
            } else {
                await client.sendMessage(msg.from, 'Uso correto: !assistente on ou !assistente off');
                return true;
            }
        }
        
        // Comando !relatorio
        if (prefixo === '!relatorio') {
            await client.sendMessage(msg.from, 'üìä Gerando relat√≥rio completo, aguarde um momento...');
            
            const relatorio = await gerarRelatorioDetalhado(true);
            
            await client.sendMessage(msg.from, relatorio);
            console.log(`Relat√≥rio completo enviado para: ${msg.from}`);
            return true;
        }
        
        // Comando !relatorio-parcial
        if (prefixo === '!relatorio-parcial' || prefixo === '!relat√≥rio-parcial' || prefixo === '!relatorioparcial') {
            await client.sendMessage(msg.from, 'üìä Gerando relat√≥rio parcial, aguarde um momento...');
            
            const relatorio = await gerarRelatorioDetalhado(false);
            
            await client.sendMessage(msg.from, relatorio);
            console.log(`Relat√≥rio parcial enviado para: ${msg.from}`);
            return true;
        }
        
        // Se chegou aqui, n√£o √© um comando conhecido
        return false;
    } catch (error) {
        console.error('Erro ao processar comando:', error);
        return false;
    }
}

// CORRE√á√ÉO: Fun√ß√£o unificada para processar mensagens e evitar duplica√ß√£o
async function processarMensagem(msg) {
    try {
        // Verifica se a mensagem j√° foi processada (evita duplica√ß√£o)
        const msgId = msg.id ? msg.id._serialized || msg.id : `${Date.now()}_${msg.from}`;
        if (mensagensProcessadas.has(msgId)) {
            return;
        }
        
        // Marca a mensagem como processada
        mensagensProcessadas.add(msgId);
        
        // Limita o tamanho do conjunto para evitar uso excessivo de mem√≥ria
        if (mensagensProcessadas.size > 1000) {
            const idsArray = [...mensagensProcessadas];
            mensagensProcessadas.clear();
            idsArray.slice(-500).forEach(id => mensagensProcessadas.add(id));
        }
        
        // Verifica se a mensagem √© do grupo configurado
        if (process.env.GRUPO_ID && msg.from !== process.env.GRUPO_ID) {
            console.log(`Mensagem ignorada: n√£o √© do grupo configurado (${process.env.GRUPO_ID})`);
            return;
        }
        
        // Ignora mensagens do pr√≥prio bot
        if (msg.fromMe) {
            return;
        }
        
        console.log(`[MENSAGEM] De ${msg.from}: ${msg.body}`);
        
        // Tenta processar como comando
        const foiComando = await processarComando(msg);
        
        // Se n√£o foi um comando, verifica outras condi√ß√µes
        if (!foiComando) {
            // Se tem m√≠dia e √© imagem, analisa automaticamente
            if (msg.hasMedia && msg.type === 'image' && process.env.ANALISE_IMAGENS === 'true') {
                try {
                    const media = await msg.downloadMedia();
                    if (media) {
                        const buffer = Buffer.from(media.data, 'base64');
                        const tempPath = path.join(__dirname, 'imagens_temp', `temp_${Date.now()}.jpg`);
                        fs.writeFileSync(tempPath, buffer);
                        
                        console.log('Imagem recebida. Analisando automaticamente...');
                        
                        // An√°lise mais concisa para imagens autom√°ticas
                        const analise = await analisarImagemComIA(tempPath);
                        const resumoBreve = analise.split('\n')[0].substring(0, 100) + "...";
                        
                        // Registra a an√°lise sem enviar mensagem
                        registrarAnaliseImagem(resumoBreve, analise, msg.author || msg.from.split('@')[0]);
                        
                        console.log('Imagem analisada e armazenada para o relat√≥rio: ' + resumoBreve);
                    }
                } catch (error) {
                    console.error('Erro ao processar imagem automaticamente:', error);
                }
            }
            
            // Se modo assistente estiver ativado, analisa mensagens normais
            if (modoAssistente && msg.body.length > 10) {
                // Registra a mensagem para discuss√µes
                // Detecta o t√≥pico baseado no conte√∫do
                let topico = "Geral";
                
                if (msg.body.toLowerCase().includes("desaparecido") || msg.body.toLowerCase().includes("busca")) {
                    topico = "Buscas";
                } else if (msg.body.toLowerCase().includes("roubo") || msg.body.toLowerCase().includes("furto")) {
                    topico = "Crimes contra patrim√¥nio";
                } else if (msg.body.toLowerCase().includes("pol√≠tico") || msg.body.toLowerCase().includes("governo")) {
                    topico = "Assuntos pol√≠ticos";
                }
                
                console.log(`Modo assistente: Registrando mensagem no t√≥pico "${topico}"`);
                registrarDiscussao(topico, msg.body, msg.author || msg.from.split('@')[0]);
                
                // Aumenta chance de resposta para ser mais participativo (de 30% para 50%)
                if (Math.random() < 0.5) {
                    console.log(`Modo assistente: Preparando resposta para mensagem`);
                    
                    // Responde em at√© 10 segundos
                    const tempoResposta = 2000 + Math.random() * 8000;
                    
                    setTimeout(async () => {
                        try {
                            const analise = await analisarTextoComIA(msg.body, "Resposta ao coment√°rio do grupo");
                            
                            // Limita o tamanho da resposta
                            let resposta = analise;
                            if (resposta.length > 500) {
                                resposta = resposta.substring(0, 497) + "...";
                            }
                            
                            // Envia a resposta
                            await client.sendMessage(msg.from, `*Assistente Agente 077:*\n\n${resposta}`);
                            console.log(`Modo assistente: Resposta enviada`);
                        } catch (error) {
                            console.error('Erro ao gerar resposta do assistente:', error);
                        }
                    }, tempoResposta);
                } else {
                    console.log(`Modo assistente: Mensagem registrada, mas sem resposta desta vez`);
                }
            }
        }
    } catch (error) {
        console.error('Erro no processamento de mensagem:', error);
    }
}

// CORRE√á√ÉO: Usar a mesma fun√ß√£o de processamento para ambos os eventos
client.on('message', processarMensagem);
client.on('message_create', processarMensagem);

// Tratamento de desconex√£o
client.on('disconnected', (reason) => {
    console.log('Bot desconectado:', reason);
    console.log('Tentando reconectar...');
    
    setTimeout(() => {
        client.initialize();
    }, 5000);
});

// Agenda limpeza de dados
agendarLimpezaDados();

// Inicializa o cliente
console.log('Inicializando Agente 077...');
console.log('Um navegador ser√° aberto. N√ÉO feche o navegador!');
console.log('Aguarde o QR code aparecer...');

client.initialize()
    .catch(error => {
        console.log(`Erro ao inicializar o cliente: ${error.message}`);
    });

// Mant√©m o processo rodando
process.stdin.resume();

// Tratamento de encerramento limpo
process.on('SIGINT', () => {
    console.log('Encerrando Agente 077...');
    salvarDados();
    client.destroy();
    setTimeout(() => process.exit(0), 1000);
});

// Controle para manter o servidor ativo
process.on('SIGTERM', async () => {
    console.log('Recebido sinal SIGTERM, encerrando...');
    await client.destroy();
    process.exit(0);
});

// Tratamento de erros n√£o capturados
process.on('uncaughtException', (error) => {
    console.log(`Erro n√£o capturado: ${error.message}`);
    console.log(error.stack);
});
